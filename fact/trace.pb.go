// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trace.proto

package fact

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Trace struct {
	//unique identifier of this trace
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//a reference to the invoking function, can be empty
	ChildOf string `protobuf:"bytes,2,opt,name=ChildOf,proto3" json:"ChildOf,omitempty"`
	//time this trace was created
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	//unique identifier of the computation runtime
	ContainerID string `protobuf:"bytes,4,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
	//unique identifier for the computation host
	HostID string `protobuf:"bytes,5,opt,name=HostID,proto3" json:"HostID,omitempty"`
	//the first time the computation runtime was started
	BootTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=BootTime,proto3" json:"BootTime,omitempty"`
	//cost for the execution
	Cost float32 `protobuf:"fixed32,7,opt,name=Cost,proto3" json:"Cost,omitempty"`
	//time the request started (sending of first byte)
	RequestStartTime *timestamp.Timestamp `protobuf:"bytes,21,opt,name=RequestStartTime,proto3" json:"RequestStartTime,omitempty"`
	//time the execution started
	StartTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	//return status, analogous to http status codes
	Status int32 `protobuf:"varint,9,opt,name=Status,proto3" json:"Status,omitempty"`
	//time the execution completed
	EndTime *timestamp.Timestamp `protobuf:"bytes,10,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	//time the first byte of the request is received
	RequestEndTime *timestamp.Timestamp `protobuf:"bytes,22,opt,name=RequestEndTime,proto3" json:"RequestEndTime,omitempty"`
	//unique version of the deployed artefact (should increase only for code change)
	CodeVersion string `protobuf:"bytes,25,opt,name=CodeVersion,proto3" json:"CodeVersion,omitempty"`
	//unique version of the deployed configuration (should change if part of the direct configuration is changed)
	ConfigVersion string `protobuf:"bytes,26,opt,name=ConfigVersion,proto3" json:"ConfigVersion,omitempty"`
	//platform identifier
	Platform string `protobuf:"bytes,11,opt,name=Platform,proto3" json:"Platform,omitempty"`
	//region identifier
	Region string `protobuf:"bytes,12,opt,name=Region,proto3" json:"Region,omitempty"`
	//runtime identifier, including a version
	Runtime string `protobuf:"bytes,13,opt,name=Runtime,proto3" json:"Runtime,omitempty"`
	//configured available memory
	Memory int32 `protobuf:"varint,14,opt,name=Memory,proto3" json:"Memory,omitempty"`
	//Time before an execution
	ExecutionDelay *duration.Duration `protobuf:"bytes,23,opt,name=ExecutionDelay,proto3" json:"ExecutionDelay,omitempty"`
	//duration of execution
	ExecutionLatency *duration.Duration `protobuf:"bytes,15,opt,name=ExecutionLatency,proto3" json:"ExecutionLatency,omitempty"`
	//time until the result is send to the receiver
	TransportDelay *duration.Duration `protobuf:"bytes,24,opt,name=TransportDelay,proto3" json:"TransportDelay,omitempty"`
	//duration from sending the request until receiving the last byte of the request
	RequestResponseLatency *duration.Duration `protobuf:"bytes,20,opt,name=RequestResponseLatency,proto3" json:"RequestResponseLatency,omitempty"`
	//map of set enviroment variables. CAUTION, this can contain senstive information only populate if necessary!
	Env map[string]string `protobuf:"bytes,16,rep,name=Env,proto3" json:"Env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//flexible set of tags than can be used as a ad-hoc extension (will be ignored by most collectors)
	Tags map[string]string `protobuf:"bytes,17,rep,name=Tags,proto3" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//logs that can be set during execution. CAUTION use sparingly as it increase the size of the trace
	Logs map[uint64]string `protobuf:"bytes,18,rep,name=Logs,proto3" json:"Logs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//strings that can be added to the trace, useful to collect execution results. CAUTION use sparingly as it increase the size of the trace
	Args                 []string `protobuf:"bytes,19,rep,name=Args,proto3" json:"Args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trace) Reset()         { *m = Trace{} }
func (m *Trace) String() string { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()    {}
func (*Trace) Descriptor() ([]byte, []int) {
	return fileDescriptor_0571941a1d628a80, []int{0}
}

func (m *Trace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace.Unmarshal(m, b)
}
func (m *Trace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace.Marshal(b, m, deterministic)
}
func (m *Trace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace.Merge(m, src)
}
func (m *Trace) XXX_Size() int {
	return xxx_messageInfo_Trace.Size(m)
}
func (m *Trace) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace.DiscardUnknown(m)
}

var xxx_messageInfo_Trace proto.InternalMessageInfo

func (m *Trace) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Trace) GetChildOf() string {
	if m != nil {
		return m.ChildOf
	}
	return ""
}

func (m *Trace) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Trace) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *Trace) GetHostID() string {
	if m != nil {
		return m.HostID
	}
	return ""
}

func (m *Trace) GetBootTime() *timestamp.Timestamp {
	if m != nil {
		return m.BootTime
	}
	return nil
}

func (m *Trace) GetCost() float32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Trace) GetRequestStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.RequestStartTime
	}
	return nil
}

func (m *Trace) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Trace) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Trace) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Trace) GetRequestEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.RequestEndTime
	}
	return nil
}

func (m *Trace) GetCodeVersion() string {
	if m != nil {
		return m.CodeVersion
	}
	return ""
}

func (m *Trace) GetConfigVersion() string {
	if m != nil {
		return m.ConfigVersion
	}
	return ""
}

func (m *Trace) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Trace) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Trace) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *Trace) GetMemory() int32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *Trace) GetExecutionDelay() *duration.Duration {
	if m != nil {
		return m.ExecutionDelay
	}
	return nil
}

func (m *Trace) GetExecutionLatency() *duration.Duration {
	if m != nil {
		return m.ExecutionLatency
	}
	return nil
}

func (m *Trace) GetTransportDelay() *duration.Duration {
	if m != nil {
		return m.TransportDelay
	}
	return nil
}

func (m *Trace) GetRequestResponseLatency() *duration.Duration {
	if m != nil {
		return m.RequestResponseLatency
	}
	return nil
}

func (m *Trace) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Trace) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Trace) GetLogs() map[uint64]string {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *Trace) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterType((*Trace)(nil), "fact.Trace")
	proto.RegisterMapType((map[string]string)(nil), "fact.Trace.EnvEntry")
	proto.RegisterMapType((map[uint64]string)(nil), "fact.Trace.LogsEntry")
	proto.RegisterMapType((map[string]string)(nil), "fact.Trace.TagsEntry")
}

func init() { proto.RegisterFile("trace.proto", fileDescriptor_0571941a1d628a80) }

var fileDescriptor_0571941a1d628a80 = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0x56, 0x9a, 0xb6, 0x6b, 0xaf, 0x5b, 0x29, 0x66, 0x2b, 0x5e, 0x1e, 0x20, 0x9a, 0x10, 0x0a,
	0x2f, 0x99, 0x34, 0xd0, 0x98, 0x78, 0x5b, 0x9b, 0xa0, 0x55, 0xda, 0xc4, 0xc8, 0x2a, 0xde, 0xbd,
	0xd6, 0xcd, 0x22, 0x5a, 0xbb, 0xd8, 0xce, 0x44, 0xff, 0x0a, 0xfe, 0x65, 0x64, 0x3b, 0xc9, 0x7e,
	0x54, 0x28, 0xe2, 0xcd, 0xf7, 0xe5, 0xfb, 0xbe, 0xbb, 0xf3, 0x5d, 0x0c, 0x3d, 0x25, 0xc8, 0x8c,
	0x86, 0x6b, 0xc1, 0x15, 0x47, 0xcd, 0x05, 0x99, 0x29, 0xef, 0x6d, 0xca, 0x79, 0xba, 0xa4, 0xc7,
	0x06, 0xbb, 0xcd, 0x17, 0xc7, 0x2a, 0x5b, 0x51, 0xa9, 0xc8, 0x6a, 0x6d, 0x69, 0xde, 0x9b, 0xe7,
	0x84, 0x79, 0x2e, 0x88, 0xca, 0x38, 0xb3, 0xdf, 0x8f, 0xfe, 0x00, 0xb4, 0xa6, 0xda, 0x16, 0xf5,
	0xa1, 0x31, 0x89, 0xb0, 0xe3, 0x3b, 0x41, 0x37, 0x69, 0x4c, 0x22, 0x84, 0x61, 0x67, 0x7c, 0x97,
	0x2d, 0xe7, 0xdf, 0x16, 0xb8, 0x61, 0xc0, 0x32, 0x44, 0x67, 0xd0, 0x9d, 0x96, 0x69, 0xb0, 0xeb,
	0x3b, 0x41, 0xef, 0xc4, 0x0b, 0x6d, 0x9e, 0xb0, 0xcc, 0x13, 0x56, 0x8c, 0xe4, 0x81, 0x8c, 0x7c,
	0xe8, 0x8d, 0x39, 0x53, 0x24, 0x63, 0x54, 0x4c, 0x22, 0xdc, 0x34, 0xbe, 0x8f, 0x21, 0x34, 0x84,
	0xf6, 0x05, 0x97, 0x6a, 0x12, 0xe1, 0x96, 0xf9, 0x58, 0x44, 0xe8, 0x14, 0x3a, 0x23, 0xce, 0x95,
	0xb6, 0xc2, 0xed, 0xda, 0x94, 0x15, 0x17, 0x21, 0x68, 0x8e, 0xb9, 0x54, 0x78, 0xc7, 0x77, 0x82,
	0x46, 0x62, 0xce, 0xe8, 0x2b, 0x0c, 0x12, 0xfa, 0x2b, 0xa7, 0x52, 0xdd, 0x28, 0x22, 0xac, 0xe7,
	0x41, 0xad, 0xe7, 0x96, 0x46, 0xdf, 0xc3, 0x83, 0x41, 0xa7, 0xfe, 0x1e, 0x1e, 0x94, 0x43, 0x68,
	0xdf, 0x28, 0xa2, 0x72, 0x89, 0xbb, 0xbe, 0x13, 0xb4, 0x92, 0x22, 0x42, 0x9f, 0x60, 0x27, 0x66,
	0x73, 0xe3, 0x07, 0xb5, 0x7e, 0x25, 0x15, 0x8d, 0xa0, 0x5f, 0xd4, 0x56, 0x8a, 0x87, 0xb5, 0xe2,
	0x67, 0x0a, 0x3b, 0x99, 0x39, 0xfd, 0x41, 0x85, 0xcc, 0x38, 0xc3, 0x87, 0xe5, 0x64, 0x2a, 0x08,
	0xbd, 0x83, 0xbd, 0x31, 0x67, 0x8b, 0x2c, 0x2d, 0x39, 0x9e, 0xe1, 0x3c, 0x05, 0x91, 0x07, 0x9d,
	0xeb, 0x25, 0x51, 0x0b, 0x2e, 0x56, 0xb8, 0x67, 0x08, 0x55, 0xac, 0xbb, 0x4e, 0x68, 0xaa, 0xa5,
	0xbb, 0x76, 0xb6, 0x36, 0xd2, 0x9b, 0x96, 0xe4, 0x4c, 0x6f, 0x2e, 0xde, 0xb3, 0x9b, 0x56, 0x84,
	0x5a, 0x71, 0x45, 0x57, 0x5c, 0x6c, 0x70, 0xdf, 0xde, 0x93, 0x8d, 0xd0, 0x39, 0xf4, 0xe3, 0xdf,
	0x74, 0x96, 0xeb, 0x45, 0x8e, 0xe8, 0x92, 0x6c, 0xf0, 0x6b, 0xd3, 0xf1, 0xe1, 0x56, 0xc7, 0x51,
	0xb1, 0xee, 0xc9, 0x33, 0x01, 0x8a, 0x61, 0x50, 0x21, 0x97, 0x44, 0x51, 0x36, 0xdb, 0xe0, 0x17,
	0x75, 0x26, 0x5b, 0x12, 0x5d, 0xc9, 0x54, 0x10, 0x26, 0xd7, 0x5c, 0x28, 0x5b, 0x09, 0xae, 0xad,
	0xe4, 0xa9, 0x00, 0x7d, 0x87, 0x61, 0x31, 0x8c, 0x84, 0xca, 0x35, 0x67, 0x92, 0x96, 0xf5, 0xec,
	0xd7, 0x59, 0xfd, 0x43, 0x88, 0xde, 0x83, 0x1b, 0xb3, 0x7b, 0x3c, 0xf0, 0xdd, 0xa0, 0x77, 0xb2,
	0x1f, 0xea, 0xa7, 0x22, 0x34, 0x7f, 0x79, 0x18, 0xb3, 0xfb, 0x98, 0x29, 0xb1, 0x49, 0x34, 0x01,
	0x7d, 0x80, 0xe6, 0x94, 0xa4, 0x12, 0xbf, 0x34, 0xc4, 0x83, 0xc7, 0x44, 0x8d, 0x5b, 0xa6, 0xa1,
	0x68, 0xea, 0x25, 0x4f, 0x25, 0x46, 0xdb, 0x54, 0x8d, 0x17, 0x54, 0x7d, 0xd4, 0xff, 0xdc, 0xb9,
	0x48, 0x25, 0x7e, 0xe5, 0xbb, 0x41, 0x37, 0x31, 0x67, 0xef, 0x14, 0x3a, 0x65, 0x6a, 0x34, 0x00,
	0xf7, 0x27, 0xdd, 0x14, 0x4f, 0x8d, 0x3e, 0xa2, 0x7d, 0x68, 0xdd, 0x93, 0x65, 0x4e, 0x8b, 0x97,
	0xc6, 0x06, 0x5f, 0x1a, 0x67, 0x8e, 0xf7, 0x19, 0xba, 0x55, 0x25, 0xff, 0x2b, 0xac, 0xea, 0x7a,
	0x2c, 0x6c, 0xd6, 0x08, 0x47, 0x47, 0xd0, 0xcf, 0x78, 0x98, 0x66, 0xea, 0x2e, 0xbf, 0x35, 0x5d,
	0x8e, 0x76, 0x4d, 0x9b, 0x57, 0x44, 0x4a, 0x92, 0xd2, 0x0b, 0xf7, 0xda, 0xb9, 0x6d, 0x9b, 0x51,
	0x7c, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xd0, 0x59, 0xf2, 0x92, 0x05, 0x00, 0x00,
}
